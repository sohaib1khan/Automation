---
- name: Setup VM
  hosts: all
  become: yes
  tasks:
    - name: Kill all apt processes
      shell: pkill apt || true
    - name: Wait for APT lock release
      shell: while lsof /var/lib/dpkg/lock-frontend; do sleep 10; done;

    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present

    - name: Install a list of packages
      apt:
        pkg:
          - net-tools
          - vim
          - tree
          - git
          - unzip
          - ansible
        state: latest

    - name: Install kubernetes
      block:
        - shell: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        - shell: curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        - shell: echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
        - shell: sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Install Helm
      block:
        - shell: wget https://get.helm.sh/helm-v3.8.2-linux-amd64.tar.gz
        - shell: tar xvf helm-*-linux-amd64.tar.gz
        - shell: sudo mv linux-amd64/helm /usr/local/bin

    - name: Install Terraform
      block:
        - shell: wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        - shell: echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        - command: sudo apt update
        - shell: sudo apt install terraform -y

    - name: Enabling tab autocompletetion for Terraform
      block:
        - shell: touch ~/.bashrc
        - shell: terraform -install-autocomplete

    - name: Install Minikube
      block:
        - shell: curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \ && chmod +x minikube
        - shell: sudo mkdir -p /usr/local/bin/
        - shell: sudo install minikube /usr/local/bin/

    - name: Install kubectx and kubens
      block:
        - shell: git clone https://github.com/ahmetb/kubectx /opt/kubectx
        - shell: sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
        - shell: sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens      

    - name: Install Docker SDK for Python
      pip:
        name: docker
        state: present

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install aptitude using apt
      apt: name=aptitude state=latest

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Verify if Docker repository is added
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update the apt package index
      apt:
        update_cache: yes

    - name: Install Docker
      apt: name=docker-ce state=latest

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x,o+x'

    - name: Again update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Pull Portainer image
      docker_image:
        name: portainer/portainer
        source: pull

    - name: Run Portainer container
      docker_container:
        name: portainer
        image: portainer/portainer
        state: started
        ports:
          - "9000:9000"

    - name: Check Docker version
      command: docker --version
      register: docker_version

    - debug: var=docker_version.stdout_lines

    - name: Test Docker installation
      command: docker run hello-world
      register: hello_world_output

    - debug: var=hello_world_output.stdout_lines

    - name: Get the host's IP address
      shell: hostname -I | awk '{print $1}'
      register: host_ip_address

    - debug:
        msg: "You can access the Portainer container at http://{{ host_ip_address.stdout }}:9000"
